// src/tests/4_createUtilTest.js
const { validateWithJest } = require('../validators/jestValidator');

const id = 'jest-util-test';
const description = 'Creates a comprehensive Jest test set for a utility function.';

const codeToTest = `
// ./src/mocks/4_slugify.ts
export function slugify(text: string): string {
  if (typeof text !== 'string') {
    return '';
  }
  return text
    .toString()
    .toLowerCase()
    .trim()
    .replace(/\s+/g, '-')      // Replace spaces with -
    .replace(/[^\w\-]+/g, '')   // Remove all non-word chars
    .replace(/\-\-+/g, '-');    // Replace multiple - with single -
}
`;

const prompt = `
You are a senior software engineer specializing in testing.
Given the following TypeScript utility function, create a comprehensive Jest test suite for it in a single file.
Please output the code in a single code block, surrounded by triple backticks.

Your tests must:
1. Use the Arrange-Act-Assert (AAA) pattern.
2. Follow the F.I.R.S.T principles.
3. Include test cases for normal inputs, edge cases (empty string, string with only spaces), and inputs with special characters.
4. Use 'describe' to group the tests for the 'slugify' function.
5. Include the function itself into your response with the code by importing it from "./codeToTest".
6. Do not include any text other than the test code itself.

The function to test is:
${codeToTest}
`;

/**
 * @param {string} generatedTestCode - The test code generated by the LLM.
 * @returns {Promise<{success: boolean, message: string}>}
 */
async function validate(generatedTestCode) {
  const jestResult = await validateWithJest(generatedTestCode, codeToTest);

  // For a test-generation task, success means the generated tests
  // were syntactically correct and able to be run by Jest. It does NOT
  // require the tests to pass, as the LLM might correctly find a bug
  // in the source code, which is a successful outcome for the LLM.
  if (jestResult.message.includes("An error occurred during Jest execution")) {
    // This is a real failure - the test file itself was invalid.
    return {
      success: false,
      message: `The generated test file failed to run: ${jestResult.message}`,
    };
  }

  if (jestResult.success) {
    return {
      success: true,
      message:
        "LLM generated a valid test suite that passed against the provided code.",
    };
  } else {
    // This is the "good failure" case.
    return {
      success: true,
      message: `SUCCESS: LLM generated a valid test suite that CORRECTLY IDENTIFIED A FLAW in the source code. Details: ${jestResult.message}`,
    };
  }
}

module.exports = { id, description, prompt, validate };