// src/tests/1_createTsInterface.js
const { validateTypeScript } = require('../validators/tsValidator');

const id = 'ts-interface-from-russian';
const description = 'Creates a TypeScript interface from a Russian text description.';

const prompt = `
Generate a single TypeScript interface named 'User' based on the following Confluence-style description. Do not add any extra text or explanations, only the code.

Description:
- id: строка, поле для уникального идентификатора пользователя, обязательный
- username: строка, необязательный
- email: строка, обязательный
- registrationDate: Date, дата регистрации, обязательный
- profile: вложенный объект Profile, обязательный

The 'Profile' interface is:
- avatarUrl: строка, необязательный
- bio: строка, необязательный
`;

/**
 * @param {string} code - The code generated by the LLM.
 * @returns {{success: boolean, message: string}}
 */
async function validate(code) {
  const tsValidation = validateTypeScript(code);
  if (!tsValidation.success) {
    return tsValidation;
  }

  // Regex breakdown:
  // \s*     - zero or more whitespace characters
  // [;,\n]? - an optional semicolon, comma, or newline (covers all valid separators)
  // $       - ensures this is at the end of a line (multiline mode 'm')

  if (!/interface\s+User/.test(code)) {
    return {
      success: false,
      message: 'Code does not contain "interface User".',
    };
  }
  if (!/id:\s*string\s*[;,\n]?$/m.test(code)) {
    return {
      success: false,
      message: 'Required field "id: string" is missing or malformed.',
    };
  }
  if (!/username\?:\s*string\s*[;,\n]?$/m.test(code)) {
    return {
      success: false,
      message: 'Optional field "username?: string" is missing or malformed.',
    };
  }
  if (!/profile:\s*Profile\s*[;,\n]?$/m.test(code)) {
    return {
      success: false,
      message: 'Nested interface "profile: Profile" is missing or malformed.',
    };
  }
  if (!/interface\s+Profile/.test(code)) {
    return {
      success: false,
      message: 'Code does not contain "interface Profile".',
    };
  }

  return { success: true, message: "All specific interface checks passed." };
}

module.exports = { id, description, prompt, validate };