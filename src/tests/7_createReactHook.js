// src/tests/7_createReactHook.js
const { validateTypeScript } = require('../validators/tsValidator');

const id = 'create-react-hook';
const description = 'Creates a custom useToggle React hook.';

const prompt = `
Create a custom React hook named 'useToggle' in TypeScript.

Requirements:
1. The hook should accept one argument: 'initialValue' (a boolean).
2. It should use the 'useState' hook to store the boolean state.
3. It must return an array containing two elements: the current boolean value, and a function to toggle the value.
4. The toggle function should be stable, so wrap it in 'useCallback'.
5. The hook's return type should be correctly typed as \`[boolean, () => void]\`.
6. Export the hook.
7. Return only the code, with no other text.
`;

/**
 * @param {string} code - The code generated by the LLM.
 * @returns {{success: boolean, message: string}}
 */
async function validate(code) {
  // Hooks can be in .ts or .tsx, so allowing JSX is safer.
  const tsValidation = validateTypeScript(code, { isJsx: true });
  if (!tsValidation.success) {
    return tsValidation;
  }

  // Structural checks for hook patterns
  if (!code.includes('export function useToggle')) {
    return { success: false, message: "Does not export a function named 'useToggle'." };
  }
  if (!code.includes("import { useState, useCallback } from 'react'")) {
    return { success: false, message: 'Did not import useState and useCallback from React.' };
  }
  if (!code.includes('useCallback')) {
    return { success: false, message: 'Toggle function is not wrapped in useCallback.' };
  }
  if (!code.includes('[boolean, () => void]')) {
    return { success: false, message: 'Hook does not have the correct return type signature.' };
  }
  if (!code.includes('setValue((prev) => !prev)')) {
    return { success: false, message: 'Does not use functional update for setting state, which is best practice.' };
  }

  return { success: true, message: 'Generated hook is valid and follows best practices.' };
}

module.exports = { id, description, prompt, validate };