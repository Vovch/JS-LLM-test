const { validateWithJest } = require("../validators/jestValidator");
const fs = require("fs");
const path = require("path");

const id = "create-react-hook";
const description = "Creates and validates a custom useToggle React hook.";

const prompt = `
Create a custom React hook named 'useToggle' in TypeScript.

Requirements:
1. The hook should accept one argument: 'initialValue' (a boolean).
2. It should use the 'useState' hook to store the boolean state.
3. It must return an array containing two elements: the current boolean value, and a function to toggle the value.
4. The toggle function should be stable, so wrap it in 'useCallback'.
5. The hook's return type should be correctly typed as \`[boolean, () => void]\`.
6. Export the hook with a named export, not default export.
7. Return only the code, with no other text.
`;

const testToRun = fs.readFileSync(
  path.resolve(__dirname, "../test-payloads/createReactHook.test.tsx"),
  "utf-8"
);

/**
 * @param {string} generatedHookCode - The hook code generated by the LLM.
 * @returns {Promise<{success: boolean, message: string}>}
 */
async function validate(generatedHookCode) {
  const jestResult = await validateWithJest(testToRun, generatedHookCode);
  return jestResult;
}

module.exports = { id, description, prompt, validate };
