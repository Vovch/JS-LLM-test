const { validateTypeScript } = require("../validators/tsValidator");

const id = "create-react-component";
const description =
  "Creates a basic React functional component with props and state.";

const prompt = `
Create a React functional component named 'TextInputWithCharacterCount' using TypeScript.

Requirements:
1. The component should accept one prop: 'maxLength' (a number).
2. It should use the 'useState' hook to manage the input's text value.
3. It must render an 'input' element.
4. Below the input, it must render a 'p' tag that displays the current character count vs the max length, like "15 / 100".
5. Use React.FC for typing the component. Define a 'Props' interface for the props.
6. Export the component.
7. Return only the TSX code, with no other text.
`;

/**
 * @param {string} code - The code generated by the LLM.
 * @returns {{success: boolean, message: string}}
 */
async function validate(code) {
  // 1. The most important check: Is the code valid TSX?
  // This will catch truly missing imports or major syntax errors.
  const tsValidation = validateTypeScript(code, { isJsx: true });
  if (!tsValidation.success) {
    return tsValidation;
  }

  // --- 2. NEW: More flexible, pattern-based validation ---

  // Check for ANY valid React import. `validateTypeScript` already confirms it's used correctly.
  if (!/import.*from\s+['"]react['"]/.test(code)) {
    return { success: false, message: "The React library was not imported." };
  }

  // Check for the USE of useState, allowing for both `useState(...)` and `React.useState(...)`
  if (!/useState|React\.useState/.test(code)) {
    return {
      success: false,
      message: "Component does not appear to use the 'useState' hook.",
    };
  }

  // These structural checks remain valid.
  if (!code.includes("React.FC")) {
    return {
      success: false,
      message: "Component is not typed with 'React.FC'.",
    };
  }
  if (!code.includes("maxLength")) {
    return {
      success: false,
      message: "Component doesn't seem to use the 'maxLength' prop.",
    };
  }
  if (!code.includes("<input")) {
    return {
      success: false,
      message: "Component does not render an <input> element.",
    };
  }
  if (!code.includes("<p>")) {
    return {
      success: false,
      message: "Component does not render a <p> element for the count.",
    };
  }
  // Check that the component is exported in some way.
  if (!/export\s+/.test(code)) {
    return { success: false, message: "The component is not exported." };
  }

  return {
    success: true,
    message: "Generated component is valid TSX and has the correct structure.",
  };
}

module.exports = { id, description, prompt, validate };
