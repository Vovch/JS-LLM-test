// src/tests/5_createReactComponent.js
const { validateTypeScript } = require("../validators/tsValidator");
const { runJestAgainstGeneratedCode } = require("../validators/generatedCodeJestValidator");
const path = require("path");
const ts = require("typescript"); // For AST check

const id = "create-react-component";
const description = "Creates a simple HelloWorld React component using TypeScript and JSX, and validates it with Jest.";

const prompt = `
Create a functional React component named 'HelloWorld' using TypeScript and JSX.
Please output the code in a single code block, surrounded by triple backticks.

Component Requirements:
1. It should be a default export: \`export default function HelloWorld ...\`
2. It should accept an optional 'name' prop (string).
3. If 'name' prop is provided and not empty, it should render: \`<h1>Hello, {name}!</h1>\`
4. If 'name' prop is not provided or is empty, it should render: \`<h1>Hello, World!</h1>\`
5. Do not include any \`import React from 'react';\` statement, as it's usually not needed in modern JSX setups.
`;

/**
 * @param {string} code - The code generated by the LLM.
 * @returns {Promise<{success: boolean, message: string, details?: string}>}
 */
async function validate(code) {
  // Step 1: Check if the code is valid TSX and get AST.
  const tsValidation = validateTypeScript(code, { isJsx: true, includeAst: true });
  if (!tsValidation.success || !tsValidation.ast) {
    return {
        success: tsValidation.success,
        message: tsValidation.ast ? tsValidation.message : "AST could not be generated for initial validation."
    };
  }

  // Step 2: AST Check for default exported 'HelloWorld' function
  // (as per subtask instructions for the new validation logic)
  let helloWorldDefaultExportFound = false;
  ts.forEachChild(tsValidation.ast, node => {
    if (ts.isFunctionDeclaration(node) && node.name && node.name.getText(tsValidation.ast) === 'HelloWorld') {
      if (node.modifiers && node.modifiers.some(m => m.kind === ts.SyntaxKind.ExportKeyword) &&
          node.modifiers.some(m => m.kind === ts.SyntaxKind.DefaultKeyword)) {
        helloWorldDefaultExportFound = true;
      }
    }
    // Check for export default HelloWorld (where HelloWorld is an identifier for a function)
    if (ts.isExportAssignment(node) && !node.isExportEquals && node.expression.kind === ts.SyntaxKind.Identifier && node.expression.getText(tsValidation.ast) === 'HelloWorld') {
        // This requires further checking to ensure 'HelloWorld' identifier actually refers to a function.
        // For simplicity here, we assume if 'export default HelloWorld' is found, and HelloWorld is an identifier, it's likely the function.
        // A more robust check would trace HelloWorld back to its declaration.
        // However, LLMs are often explicitly asked for `export default function HelloWorld...` which is covered by the FunctionDeclaration check.
        // This will catch `const HelloWorld = ...; export default HelloWorld;` if HelloWorld is an identifier.
        let isFunction = false;
        ts.forEachChild(tsValidation.ast, (innerNode) => {
            if ((ts.isFunctionDeclaration(innerNode) || ts.isVariableDeclaration(innerNode)) && innerNode.name && innerNode.name.getText(tsValidation.ast) === 'HelloWorld') {
                if (ts.isFunctionDeclaration(innerNode) || (ts.isVariableDeclaration(innerNode) && innerNode.initializer && (ts.isFunctionExpression(innerNode.initializer) || ts.isArrowFunction(innerNode.initializer)))) {
                    isFunction = true;
                }
            }
        });
        if (isFunction) {
            helloWorldDefaultExportFound = true;
        }
    }
  });

  if (!helloWorldDefaultExportFound) {
    return { success: false, message: "AST check: No default exported function named 'HelloWorld' found." };
  }

  // Step 3: Run Jest tests if initial TS and AST checks pass
  // __dirname for src/tests/5_createReactComponent.js is /app/src/tests
  // Path to test file is /app/src/test-assets/HelloWorldComponent.test.tsx
  const predefinedTestFilePath = path.resolve(__dirname, "../test-assets/HelloWorldComponent.test.tsx");

  try {
    const jestResult = await runJestAgainstGeneratedCode(code, predefinedTestFilePath, true); // true for isReactCode
    return jestResult;
  } catch (error) {
    console.error("Critical error calling runJestAgainstGeneratedCode:", error);
    return {
      success: false,
      message: `A critical error occurred while trying to run Jest tests: ${error.message}`,
      details: error.stack
    };
  }
}

module.exports = { id, description, prompt, validate };
