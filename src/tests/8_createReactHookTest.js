// Test for creating React hook test// src/tests/8_createReactHookTest.js
const { validateWithJest } = require('../validators/jestValidator');

const id = 'react-hook-test';
const description = 'Creates a test set for a React custom hook using react-testing-library.';

// The hook we are asking the LLM to test.
const codeToTest = `
import { useState, useCallback } from 'react';

export function useToggle(initialValue: boolean): [boolean, () => void] {
  const [value, setValue] = useState(initialValue);
  const toggle = useCallback(() => {
    setValue((prev) => !prev);
  }, []);
  return [value, toggle];
}

export default useToggle;
`;

const prompt = `
You are an expert in testing React applications.
Given the following custom React hook 'useToggle', create a comprehensive Jest test suite for it.

Your tests must:
1.  Import 'renderHook' and 'act' from '@testing-library/react'.
2.  Test that the hook returns the correct initial value (test both true and false initial values).
3.  Test that calling the toggle function correctly flips the value from false to true.
4.  Test that calling the toggle function correctly flips the value from true to false.
5.  Use 'act()' to wrap any state updates.
6.  Import the hook from './useToggle'.
7.  Do not add any explanatory text, only the pure test code.

The hook to test is:
${codeToTest}
`;

/**
 * @param {string} generatedTestCode - The test code generated by the LLM.
 * @returns {Promise<{success: boolean, message: string}>}
 */
async function validate(generatedTestCode) {
  // Use the Jest validator, providing both the generated test and the code it's testing.
  return await validateWithJest(generatedTestCode, codeToTest);
}

module.exports = { id, description, prompt, validate };